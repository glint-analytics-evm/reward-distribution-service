syntax = "proto3";

package distribute_reward;

service DistributeReward {
    // DistributeRewardRequest is used to distribute reward to a single recipient
    rpc DistributeRewardRequest(RewardRequest) returns (RequestResponse) {}
    // DistributeRewardsRequest is used to distribute rewards to multiple recipients
    rpc DistributeRewardsRequest(RewardsRequest) returns (RequestResponse) {}
    // DistributeRewardResponse is used to stream reward responses for DistributeRewardRequest
    rpc DistributeRewardResponse(SubscriberIdentifier) returns (stream RewardResponse) {}
    // DistributeRewardsResponse is used to stream reward responses for DistributeRewardsRequest
    rpc DistributeRewardsResponse(SubscriberIdentifier) returns (stream RewardResponse) {}
}

message RewardRequest {
    string recipient = 1; // address of the reward recipient
    string amount = 2; // amount of the reward (it is string because it will be converted to bigint)
}

message RewardsRequest {
    repeated string recipients = 1; // addresses of the reward recipients
    repeated string amounts = 2; // amounts of the reward (it is string because it will be converted to bigint)
}

message RequestResponse {
    optional string id = 1; // id of the request (generated by the server)(if successful)
    optional string error = 2; // error message (if not successful)
}

message RewardResponse {
    string id = 1; // RequestResponse's id
    optional string tx_hash = 2; // transaction hash (if successful)
    optional string error = 3; // error message (if not successful)
}

message SubscriberIdentifier {
    string id = 1; // identifier for gRPC client (use uuid preferably)
}